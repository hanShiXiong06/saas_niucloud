<template>
  <div class="return-order-list">
    <el-card class="box-card" shadow="never">
      <template #header>
        <div class="card-header">
          <span>退回订单列表</span>
        </div>
      </template>

      <!-- 搜索区域 -->
      <el-form :model="searchData" label-width="80px" class="search-form" inline>
        <el-form-item label="订单编号">
          <el-input v-model="searchData.order_no" placeholder="请输入订单编号" clearable />
        </el-form-item>
        <el-form-item label="快递单号">
          <el-input v-model="searchData.express_no" placeholder="请输入快递单号" clearable />
        </el-form-item>
        <el-form-item label="订单状态">
          <el-select v-model="searchData.status" placeholder="请选择订单状态" clearable>
            <el-option v-for="item in statusOptions" :key="item.value" :label="item.label" :value="item.value" />
          </el-select>
        </el-form-item>
        <el-form-item label="创建时间">
          <el-date-picker
            v-model="searchData.create_time"
            type="daterange"
            range-separator="至"
            start-placeholder="开始日期"
            end-placeholder="结束日期"
            value-format="YYYY-MM-DD"
          />
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="handleSearch">搜索</el-button>
          <el-button @click="resetSearch">重置</el-button>
        </el-form-item>
      </el-form>

      <!-- 状态统计卡片 -->
      <div class="status-cards">
        <el-card
          v-for="(item, index) in statusCards"
          :key="index"
          class="status-card"
          :class="{ active: searchData.status === item.value }"
          shadow="hover"
          @click="handleStatusFilter(item.value)"
        >
          <div class="status-card-content">
            <div class="status-card-title">{{ item.label }}</div>
            <div class="status-card-count">{{ item.count }}</div>
          </div>
        </el-card>
      </div>

      <!-- 表格区域 -->
      <el-table v-loading="loading" :data="tableData" style="width: 100%; margin-top: 20px" border>
        <el-table-column prop="id" label="ID" width="80" />
        <el-table-column prop="order_no" label="退回订单编号" min-width="180" />
        <el-table-column prop="express_company" label="快递公司" min-width="120" />
        <el-table-column prop="express_no" label="快递单号" min-width="150" />
        <el-table-column label="退回设备数量" min-width="120">
          <template #default="scope">
            {{ scope.row.returnDevices ? scope.row.returnDevices.length : 0 }}
          </template>
        </el-table-column>
        <el-table-column label="状态" width="120">
          <template #default="scope">
            <el-tag :type="getStatusType(scope.row.status)">
              {{ getStatusText(scope.row.status) }}
            </el-tag>
          </template>
        </el-table-column>
        <el-table-column prop="create_at" label="创建时间" min-width="180" />
        <el-table-column label="操作" width="200" fixed="right">
          <template #default="scope">
            <el-button type="primary" size="small" @click="handleDetail(scope.row.id)">详情</el-button>
            <el-button
              v-if="canPerformAction('CONFIRM', scope.row.status)"
              type="success"
              size="small"
              @click="handleUpdateStatus(scope.row.id, RETURN_ORDER_STATUS.RETURNING)"
            >
              确认退货
            </el-button>
            <el-button
              v-if="canPerformAction('CANCEL', scope.row.status)"
              type="danger"
              size="small"
              @click="handleCancel(scope.row.id)"
            >
              取消
            </el-button>
            <el-button
              v-if="canPerformAction('DELETE', scope.row.status)"
              type="danger"
              size="small"
              @click="handleDelete(scope.row.id)"
            >
              删除
            </el-button>
          </template>
        </el-table-column>
      </el-table>

      <!-- 分页 -->
      <div class="pagination-container">
        <el-pagination
          v-model:current-page="page"
          v-model:page-size="limit"
          :page-sizes="[10, 20, 50, 100]"
          layout="total, sizes, prev, pager, next, jumper"
          :total="total"
          @size-change="handleSizeChange"
          @current-change="handleCurrentChange"
        />
      </div>
    </el-card>

    <!-- 取消订单对话框 -->
    <el-dialog v-model="cancelDialogVisible" title="取消退回订单" width="500px">
      <el-form :model="cancelForm" label-width="100px">
        <el-form-item label="取消原因">
          <el-input v-model="cancelForm.comment" type="textarea" :rows="3" placeholder="请输入取消原因" />
        </el-form-item>
      </el-form>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="cancelDialogVisible = false">取消</el-button>
          <el-button type="primary" @click="confirmCancel">确认</el-button>
        </span>
      </template>
    </el-dialog>
  </div>
</template>

<script setup lang="ts">
import { ref, reactive, onMounted, computed } from 'vue'
import { ElMessage, ElMessageBox } from 'element-plus'
import { useRouter } from 'vue-router'

import {
  getReturnOrderList,
  getReturnOrderStatusCount,
  updateReturnOrderStatus,
  deleteReturnOrder,
  cancelReturnOrder
} from '../../api/recycle_return_order'
import { IReturnOrderListParams } from '../../interface/recycle_return_order'
import {
  RETURN_ORDER_STATUS,
  RETURN_ORDER_STATUS_TEXT,
  RETURN_ORDER_STATUS_TYPE,
  STATUS_ACTION_PERMISSIONS
} from '../../constants/recycle_return_order'

const router = useRouter()

// 搜索表单数据
const searchData = reactive<IReturnOrderListParams>({
  order_no: '',
  express_no: '',
  status: undefined,
  create_time: []
})

// 状态选项
const statusOptions = [
  { label: RETURN_ORDER_STATUS_TEXT[RETURN_ORDER_STATUS.PENDING], value: RETURN_ORDER_STATUS.PENDING },
  { label: RETURN_ORDER_STATUS_TEXT[RETURN_ORDER_STATUS.RETURNING], value: RETURN_ORDER_STATUS.RETURNING },
  { label: RETURN_ORDER_STATUS_TEXT[RETURN_ORDER_STATUS.COMPLETED], value: RETURN_ORDER_STATUS.COMPLETED },
  { label: RETURN_ORDER_STATUS_TEXT[RETURN_ORDER_STATUS.CANCELLED], value: RETURN_ORDER_STATUS.CANCELLED }
]

// 表格数据
const tableData = ref([])
const loading = ref(false)
const page = ref(1)
const limit = ref(10)
const total = ref(0)

// 状态统计卡片数据
const statusCount = ref({
  all: 0,
  pending: 0,
  returning: 0,
  completed: 0,
  canceled: 0
})

// 计算状态卡片数据
const statusCards = computed(() => [
  { label: '全部', value: undefined, count: statusCount.value.all },
  { label: RETURN_ORDER_STATUS_TEXT[RETURN_ORDER_STATUS.PENDING], value: RETURN_ORDER_STATUS.PENDING, count: statusCount.value.pending },
  { label: RETURN_ORDER_STATUS_TEXT[RETURN_ORDER_STATUS.RETURNING], value: RETURN_ORDER_STATUS.RETURNING, count: statusCount.value.returning },
  { label: RETURN_ORDER_STATUS_TEXT[RETURN_ORDER_STATUS.COMPLETED], value: RETURN_ORDER_STATUS.COMPLETED, count: statusCount.value.completed },
  { label: RETURN_ORDER_STATUS_TEXT[RETURN_ORDER_STATUS.CANCELLED], value: RETURN_ORDER_STATUS.CANCELLED, count: statusCount.value.canceled }
])

// 取消订单相关
const cancelDialogVisible = ref(false)
const cancelForm = reactive({
  id: 0,
  comment: ''
})

// 获取订单列表
const getList = async () => {
  loading.value = true
  try {
    const params: IReturnOrderListParams = {
      ...searchData,
      page: page.value,
      limit: limit.value
    }
    const res = await getReturnOrderList(params)
    if (res.data.code === 200) {
      tableData.value = res.data.data.list
      total.value = res.data.data.count
    } else {
      ElMessage.error(res.data.message || '获取列表失败')
    }
  } catch (error) {
    console.error(error)
    ElMessage.error('获取列表失败')
  } finally {
    loading.value = false
  }
}

// 获取状态统计
const getStatusCount = async () => {
  try {
    const res = await getReturnOrderStatusCount()
    if (res.data.code === 200) {
      statusCount.value = res.data.data
    }
  } catch (error) {
    console.error(error)
  }
}

// 搜索
const handleSearch = () => {
  page.value = 1
  getList()
}

// 重置搜索
const resetSearch = () => {
  searchData.order_no = ''
  searchData.express_no = ''
  searchData.status = undefined
  searchData.create_time = []
  page.value = 1
  getList()
}

// 状态筛选
const handleStatusFilter = (status: number | undefined) => {
  searchData.status = status
  page.value = 1
  getList()
}

// 分页相关
const handleSizeChange = (val: number) => {
  limit.value = val
  getList()
}

const handleCurrentChange = (val: number) => {
  page.value = val
  getList()
}

// 获取状态文本
const getStatusText = (status: number) => {
  return RETURN_ORDER_STATUS_TEXT[status] || '未知状态'
}

// 获取状态类型
const getStatusType = (status: number) => {
  return RETURN_ORDER_STATUS_TYPE[status] || ''
}

// 查看详情
const handleDetail = (id: number) => {
  router.push(`/addon/phone_shop_price/recycle_return_order/detail/${id}`)
}

// 更新状态
const handleUpdateStatus = async (id: number, status: number) => {
  try {
    const res = await updateReturnOrderStatus(id, { status })
    if (res.data.code === 200) {
      ElMessage.success('操作成功')
      getList()
      getStatusCount()
    } else {
      ElMessage.error(res.data.message || '操作失败')
    }
  } catch (error) {
    console.error(error)
    ElMessage.error('操作失败')
  }
}

// 删除订单
const handleDelete = (id: number) => {
  ElMessageBox.confirm('确定要删除该退回订单吗？', '提示', {
    confirmButtonText: '确定',
    cancelButtonText: '取消',
    type: 'warning'
  })
    .then(async () => {
      try {
        const res = await deleteReturnOrder(id)
        if (res.data.code === 200) {
          ElMessage.success('删除成功')
          getList()
          getStatusCount()
        } else {
          ElMessage.error(res.data.message || '删除失败')
        }
      } catch (error) {
        console.error(error)
        ElMessage.error('删除失败')
      }
    })
    .catch(() => {})
}

// 取消订单
const handleCancel = (id: number) => {
  cancelForm.id = id
  cancelForm.comment = ''
  cancelDialogVisible.value = true
}

// 确认取消
const confirmCancel = async () => {
  try {
    const res = await cancelReturnOrder(cancelForm.id, cancelForm.comment)
    if (res.data.code === 200) {
      ElMessage.success('取消成功')
      cancelDialogVisible.value = false
      getList()
      getStatusCount()
    } else {
      ElMessage.error(res.data.message || '取消失败')
    }
  } catch (error) {
    console.error(error)
    ElMessage.error('取消失败')
  }
}

// 检查操作权限
const canPerformAction = (action: 'DELETE' | 'CANCEL' | 'CONFIRM' | 'COMPLETE', status: number) => {
  return STATUS_ACTION_PERMISSIONS[action].includes(status)
}

onMounted(() => {
  getList()
  getStatusCount()
})
</script>

<style scoped>
.return-order-list {
  padding: 20px;
}

.search-form {
  margin-bottom: 20px;
}

.status-cards {
  display: flex;
  margin-bottom: 20px;
  flex-wrap: wrap;
}

.status-card {
  margin-right: 15px;
  margin-bottom: 15px;
  width: 150px;
  cursor: pointer;
  transition: all 0.3s;
}

.status-card.active {
  border-color: #409eff;
  box-shadow: 0 0 8px rgba(64, 158, 255, 0.6);
}

.status-card-content {
  text-align: center;
}

.status-card-title {
  font-size: 14px;
  color: #606266;
  margin-bottom: 10px;
}

.status-card-count {
  font-size: 24px;
  font-weight: bold;
  color: #303133;
}

.pagination-container {
  margin-top: 20px;
  display: flex;
  justify-content: flex-end;
}
</style> 